datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../documentation/erd.md"
  includeRelationFromFields = true
}

model ParkingGarage {
  id             Int             @id @default(autoincrement())
  name           String
  address        String
  levels         Level[]
  parkingRates   ParkingRate[]
  parkingTickets ParkingTicket[]
  exitTickets    ExitTicket[]
  customers      Customer[]
}

model Level {
  id                Int            @id @default(autoincrement())
  levelNumber       Int
  parking_spaces    Int
  parkingGarage     ParkingGarage  @relation(fields: [parking_garage_id], references: [id], onDelete: Cascade)
  parking_garage_id Int
  occupiedSpaces     ParkingSpace[]

  @@unique([parking_garage_id, levelNumber])
}

model ParkingSpace {
  id          Int      @id @default(autoincrement())
  customer    Customer @relation(fields: [customer_id], references: [id])
  customer_id String
  level       Level    @relation(fields: [level_id], references: [id])
  level_id    Int
  parkingSpot Int

  @@unique([level_id, parkingSpot])
}

model Customer {
  id                    String          @id @default(uuid())
  is_long_term_customer Boolean
  is_blocked            Boolean
  parkingSpace          ParkingSpace[]
  parkingTickets        ParkingTicket[]
  exitTickets           ExitTicket[]
  parkingGarages        ParkingGarage   @relation(fields: [parking_garage_id], references: [id])
  parking_garage_id     Int
}

model ParkingTicket {
  id                Int           @id @default(autoincrement())
  entry_date        DateTime
  customer          Customer      @relation(fields: [customer_id], references: [id])
  customer_id       String
  parkingGarage     ParkingGarage @relation(fields: [parking_garage_id], references: [id])
  parking_garage_id Int
}

model ExitTicket {
  id                Int           @id @default(autoincrement())
  exit_date         DateTime
  price             Float
  customer          Customer      @relation(fields: [customer_id], references: [id])
  customer_id       String
  parkingGarage     ParkingGarage @relation(fields: [parking_garage_id], references: [id])
  parking_garage_id Int
}

model ParkingRate {
  id                Int           @id @default(autoincrement())
  parkingGarage     ParkingGarage @relation(fields: [parking_garage_id], references: [id])
  parking_garage_id Int
  price             Float
  start_time   DateTime
  end_time     DateTime
}
