datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../documentation/erd.md"
  includeRelationFromFields = true
}

model ParkingGarage {
  id                Int                @id @default(autoincrement())
  name              String
  address           String
  levels            Level[]
  parkingRates      ParkingRate[]
  customers         Customer[]
  accountingReports AccountingReport[]
  ParkingTicket     ParkingTicket[]
}

model Level {
  id                Int            @id @default(autoincrement())
  levelNumber       Int
  parking_spaces    Int
  parkingGarage     ParkingGarage  @relation(fields: [parking_garage_id], references: [id], onDelete: Cascade)
  parking_garage_id Int
  occupiedSpaces    ParkingSpace[]

  @@unique([parking_garage_id, levelNumber])
}

model ParkingSpace {
  id          Int       @id @default(autoincrement())
  level       Level     @relation(fields: [level_id], references: [id], onDelete: Cascade)
  level_id    Int
  parkingSpot Int
  customer    Customer? @relation(fields: [customer_id], references: [id], onDelete: SetNull)
  customer_id String?   @unique

  @@unique([level_id, parkingSpot])
}

model Customer {
  id                    String          @id @default(uuid())
  is_long_term_customer Boolean
  is_blocked            Boolean
  license_plate         String?
  last_payment          DateTime?
  created_at            DateTime        @default(now())
  parkingSpace          ParkingSpace?
  parkingTickets        ParkingTicket[]
  parkingGarage         ParkingGarage   @relation(fields: [parking_garage_id], references: [id], onDelete: Cascade)
  parking_garage_id     Int
}

model AccountingReport {
  id                Int           @id @default(autoincrement())
  parkingGarage     ParkingGarage @relation(fields: [parking_garage_id], references: [id], onDelete: Cascade)
  parking_garage_id Int
  generationTime    DateTime
  searchFrom        DateTime
  searchTo          DateTime
  price             Float
  numberOfTickets   Int
}

model ParkingTicket {
  id                Int           @id @default(autoincrement())
  entry_date        DateTime
  customer          Customer?     @relation(fields: [customer_id], references: [id], onDelete: SetNull)
  customer_id       String?
  parkingGarage     ParkingGarage @relation(fields: [parking_garage_id], references: [id], onDelete: Cascade)
  parking_garage_id Int
  exit_date         DateTime?
  finalprice        Float?
}

model ParkingRate {
  id                Int           @id @default(autoincrement())
  parkingGarage     ParkingGarage @relation(fields: [parking_garage_id], references: [id], onDelete: Cascade)
  parking_garage_id Int
  price             Float
  start_time        DateTime
  end_time          DateTime
  rateType          RateType
}

enum RateType {
  WEEKDAY
  WEEKEND
  HOLIDAY
  DAYRATE
  MONTHRATE
}
